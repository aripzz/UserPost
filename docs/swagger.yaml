basePath: /
definitions:
  entity.CreatePost:
    properties:
      content:
        type: string
      title:
        type: string
      user_id:
        type: integer
    required:
    - content
    - title
    - user_id
    type: object
  entity.CreateUser:
    properties:
      name:
        type: string
    type: object
  entity.MultiCreatePost:
    properties:
      posts:
        items:
          $ref: '#/definitions/entity.Posts'
        type: array
      user_id:
        type: integer
    required:
    - posts
    - user_id
    type: object
  entity.Post:
    properties:
      content:
        type: string
      id:
        type: integer
      title:
        type: string
      user_id:
        type: integer
    type: object
  entity.Posts:
    properties:
      content:
        type: string
      title:
        type: string
    required:
    - content
    - title
    type: object
  entity.UpdatePost:
    properties:
      content:
        type: string
      id:
        type: integer
      title:
        type: string
      user_id:
        type: integer
    required:
    - id
    type: object
  entity.User:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  helpers.StandardResponse:
    properties:
      data: {}
      message:
        type: string
      status:
        type: integer
    type: object
host: localhost:3000
info:
  contact: {}
  description: API documentation for UserPost backend.
  title: UserPost API
  version: "1.0"
paths:
  /api/v1/multi-posts:
    post:
      consumes:
      - application/json
      description: Add a new post to the database
      parameters:
      - description: Post data
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/entity.MultiCreatePost'
      produces:
      - application/json
      responses:
        "201":
          description: Post created
          schema:
            type: string
      summary: Create a new multi post
      tags:
      - posts
  /api/v1/posts:
    get:
      consumes:
      - application/json
      description: Get a list of all posts
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Post'
            type: array
      summary: Get all posts
      tags:
      - posts
    post:
      consumes:
      - application/json
      description: Add a new post to the database
      parameters:
      - description: Post data
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/entity.CreatePost'
      produces:
      - application/json
      responses:
        "201":
          description: Post created
          schema:
            type: string
      summary: Create a new post
      tags:
      - posts
  /api/v1/posts/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a post by ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Post deleted
          schema:
            type: string
      summary: Delete a post
      tags:
      - posts
    get:
      consumes:
      - application/json
      description: Get a single post by ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Post'
      summary: Get a post by ID
      tags:
      - posts
    patch:
      consumes:
      - application/json
      description: Update a post's data
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      - description: Post data
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/entity.UpdatePost'
      produces:
      - application/json
      responses:
        "200":
          description: Post updated successfully
          schema:
            $ref: '#/definitions/helpers.StandardResponse'
        "400":
          description: Invalid ID or request body
          schema:
            $ref: '#/definitions/helpers.StandardResponse'
        "404":
          description: Data not found
          schema:
            $ref: '#/definitions/helpers.StandardResponse'
      summary: Update an existing post
      tags:
      - posts
    put:
      consumes:
      - application/json
      description: Update a post's data
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      - description: Post data
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/entity.Post'
      produces:
      - application/json
      responses:
        "200":
          description: Post updated
          schema:
            type: string
      summary: Update an existing post
      tags:
      - posts
  /api/v1/users:
    get:
      consumes:
      - application/json
      description: Get a list of all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.User'
            type: array
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Add a new user to the database
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/entity.CreateUser'
      produces:
      - application/json
      responses:
        "201":
          description: User created
          schema:
            type: string
      summary: Create a new user
      tags:
      - users
  /api/v1/users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User deleted
          schema:
            type: string
      summary: Delete a user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get a single user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.User'
      summary: Get a user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update a user's data
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/entity.CreateUser'
      produces:
      - application/json
      responses:
        "200":
          description: User updated
          schema:
            type: string
      summary: Update an existing user
      tags:
      - users
swagger: "2.0"
